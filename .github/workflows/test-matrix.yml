name: Test Matrix

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-matrix:
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        compiler: [gcc, clang]
        build-type: [Debug, Release]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies (Ubuntu)
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libasound2-dev mesa-common-dev libx11-dev libxrandr-dev libxi-dev xorg-dev libgl1-mesa-dev libglu1-mesa-dev xvfb
        
    - name: Install Clang
      if: matrix.compiler == 'clang'
      run: |
        sudo apt-get install -y clang
        
    - name: Build Raylib
      run: |
        git clone https://github.com/raysan5/raylib.git
        cd raylib
        mkdir build && cd build
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          export CC=clang
          export CXX=clang++
        fi
        cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} ..
        make -j2
        sudo make install
        sudo ldconfig
        
    - name: Build EpiGimp
      run: |
        mkdir -p build
        cd build
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          export CC=clang
          export CXX=clang++
        fi
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} ..
        make -j2
        
    - name: Run Core Tests
      run: |
        cd build
        xvfb-run -a ./EpiGimpTests --gtest_filter="LayerSystemTest.*:CanvasLayerTest.*:LayerDrawCommandTest.*" --gtest_brief
        
    - name: Run Utility Tests
      run: |
        cd build  
        xvfb-run -a ./EpiGimpTests --gtest_filter="HistoryManagerTest.*:FileUtilsTest.*:CanvasUtilsTest.*" --gtest_brief
        
    - name: Run Basic Tests
      run: |
        cd build
        xvfb-run -a ./EpiGimpTests --gtest_filter="SimpleTest.*:SimpleFunctionTest.*:UtilityTest.*" --gtest_brief
        
    - name: Check for Memory Leaks (Debug build only)
      if: matrix.build-type == 'Debug' && matrix.compiler == 'gcc'
      run: |
        sudo apt-get install -y valgrind
        cd build
        echo "=== Memory Leak Detection with Valgrind ==="
        # Copy suppression file to build directory
        cp ../.valgrind.supp .
        
        # Run a subset of tests with valgrind to check for application leaks
        # Using suppressions to ignore OpenGL/system library leaks
        echo "Testing Layer System for memory leaks..."
        xvfb-run -a valgrind \
          --leak-check=full \
          --show-leak-kinds=definite \
          --suppressions=.valgrind.supp \
          --error-exitcode=1 \
          --track-origins=yes \
          ./EpiGimpTests --gtest_filter="LayerSystemTest.LayerCreation:LayerSystemTest.LayerManagerBasics" --gtest_brief
          
        echo "Testing Simple Operations for memory leaks..."  
        xvfb-run -a valgrind \
          --leak-check=full \
          --show-leak-kinds=definite \
          --suppressions=.valgrind.supp \
          --error-exitcode=1 \
          ./EpiGimpTests --gtest_filter="SimpleTest.StringOperations:UtilityTest.BasicOperations" --gtest_brief