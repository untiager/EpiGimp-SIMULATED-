name: Cross-Platform Build & Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies (GCC)
      if: matrix.compiler == 'gcc'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libraylib-dev
        
    - name: Install dependencies (Clang)
      if: matrix.compiler == 'clang'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake libraylib-dev
        
    - name: Configure with GCC
      if: matrix.compiler == 'gcc'
      run: |
        mkdir build && cd build
        cmake -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc ..
        
    - name: Configure with Clang
      if: matrix.compiler == 'clang'
      run: |
        mkdir build && cd build
        cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang ..
        
    - name: Build
      run: |
        cd build
        make -j$(nproc)
        
    - name: Run tests
      run: |
        cd build
        ./EpiGimpTests --gtest_filter=-BasicTest* --gtest_output=xml:test_results_${{ matrix.compiler }}.xml
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-linux-${{ matrix.compiler }}
        path: build/test_results_${{ matrix.compiler }}.xml

  # Note: Windows and macOS builds would require Raylib to be available
  # This is a placeholder for future expansion
  test-windows:
    runs-on: windows-latest
    if: false  # Disabled until Raylib Windows setup is configured
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      
    # TODO: Install Raylib on Windows
    # TODO: Configure and build
    # TODO: Run tests

  summary:
    needs: [test-linux]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        merge-multiple: true
        
    - name: Test Results Summary
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        total_success=true
        
        for file in test_results_*.xml; do
          if [ -f "$file" ]; then
            compiler=$(echo $file | sed 's/test_results_//;s/.xml//')
            total_tests=$(grep -o 'tests="[0-9]*"' "$file" | grep -o '[0-9]*' | head -1)
            failed_tests=$(grep -o 'failures="[0-9]*"' "$file" | grep -o '[0-9]*' | head -1)
            
            echo "### $compiler Compiler" >> $GITHUB_STEP_SUMMARY
            echo "- **Total tests**: $total_tests" >> $GITHUB_STEP_SUMMARY
            echo "- **Failed tests**: $failed_tests" >> $GITHUB_STEP_SUMMARY
            
            if [ "$failed_tests" = "0" ]; then
              echo "- **Status**: ✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status**: ❌ $failed_tests tests failed!" >> $GITHUB_STEP_SUMMARY
              total_success=false
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        if [ "$total_success" = true ]; then
          echo "## ✅ Overall Status: All Tests Passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Overall Status: Some Tests Failed!" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi