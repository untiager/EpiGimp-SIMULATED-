name: Memory Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  memory-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libasound2-dev mesa-common-dev libx11-dev libxrandr-dev libxi-dev xorg-dev libgl1-mesa-dev libglu1-mesa-dev xvfb valgrind
        
    - name: Build Raylib
      run: |
        git clone https://github.com/raysan5/raylib.git
        cd raylib
        mkdir build && cd build
        cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug ..
        make -j2
        sudo make install
        sudo ldconfig
        
    - name: Build EpiGimp (Debug with symbols)
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-g -O0" ..
        make -j2
        
    - name: Test Memory - Core Tests (Minimal)
      run: |
        cd build
        echo "=== Testing Core Functionality (Minimal Graphics Init) ==="
        # Use xvfb and run the fastest, simplest tests only
        timeout 60s xvfb-run -a valgrind \
          --leak-check=full \
          --show-leak-kinds=definite \
          --track-origins=yes \
          --suppressions=../.valgrind.supp \
          --log-file=valgrind_core.log \
          --error-exitcode=0 \
          ./EpiGimpTests --gtest_filter="SimpleTest.BasicStringOperations:SimpleTest.BasicMathOperations" --gtest_brief || echo "Core test completed with issues"
        
        echo "Core tests valgrind results:"
        if [ -f valgrind_core.log ]; then
          cat valgrind_core.log | grep -A 5 -B 5 "ERROR SUMMARY" || echo "No error summary found"
        else
          echo "No valgrind log generated"
        fi
        
    - name: Test Memory - Layer System (Minimal Graphics)
      run: |
        cd build
        echo "=== Testing Layer System (Minimal Graphics) ==="
        timeout 60s xvfb-run -a valgrind \
          --leak-check=full \
          --show-leak-kinds=definite \
          --track-origins=yes \
          --suppressions=../.valgrind.supp \
          --log-file=valgrind_layers.log \
          --error-exitcode=0 \
          ./EpiGimpTests --gtest_filter="LayerSystemTest.LayerCreation" --gtest_brief || echo "Layer test completed with issues"
        
        echo "Layer tests valgrind results:"
        if [ -f valgrind_layers.log ]; then
          cat valgrind_layers.log | grep -A 5 -B 5 "ERROR SUMMARY" || echo "No error summary found"
        else
          echo "No valgrind log generated"
        fi
        
    - name: Analyze Results
      run: |
        cd build
        echo "=== Memory Analysis Summary ==="
        
        echo "Core Tests Results:"
        if [ -f valgrind_core.log ]; then
          if grep -q "ERROR SUMMARY: 0 errors" valgrind_core.log; then
            echo "‚úÖ Core tests: No memory errors detected"
          else
            echo "‚ö†Ô∏è Core tests: Memory issues found"
            grep "definitely lost\|indirectly lost\|ERROR SUMMARY" valgrind_core.log || echo "No clear summary found"
          fi
        else
          echo "‚ùå Core tests: Log file not generated (test failed to run)"
        fi
        
        echo ""
        echo "Layer Tests Results:"
        if [ -f valgrind_layers.log ]; then
          if grep -q "ERROR SUMMARY: 0 errors" valgrind_layers.log; then
            echo "‚úÖ Layer tests: No application memory errors detected"
          else
            echo "‚ö†Ô∏è Layer tests: Checking for application-specific leaks..."
            # Only report leaks that are not in system/OpenGL libraries
            app_leaks=$(grep -v "libGL\|dri\|glX\|X11\|extensionSupportedGLX\|_glfwInit\|glfwCreateWindow" valgrind_layers.log | grep "definitely lost\|indirectly lost" || true)
            if [ -z "$app_leaks" ]; then
              echo "‚úÖ No application-specific leaks found"
              echo "   (System library 'leaks' are expected and suppressed)"
            else
              echo "‚ö†Ô∏è Application-specific memory issues found:"
              echo "$app_leaks"
            fi
          fi
        else
          echo "‚ùå Layer tests: Log file not generated (test failed to run)"
        fi
        
        echo ""
        echo "üìã Memory Analysis Notes:"
        echo "  - Core test failures indicate real application memory leaks"
        echo "  - Layer test 'leaks' from OpenGL/GLX libraries are normal"
        echo "  - Only application-specific leaks in layer tests are concerning"
        echo "  - Test timeouts may indicate infinite loops or deadlocks"
        
    - name: Upload Memory Analysis Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: memory-analysis-results
        path: |
          build/valgrind_*.log
          .valgrind.supp